package co.yedam.warehousing.menu;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.sql.Date;
import java.util.List;
import java.util.Scanner;

import co.yedam.warehousing.history.service.HistoryService;
import co.yedam.warehousing.history.service.HistoryVO;
import co.yedam.warehousing.history.serviceImpl.HistoryServiceImpl;
import co.yedam.warehousing.product.service.ProductService;
import co.yedam.warehousing.product.service.ProductVO;
import co.yedam.warehousing.product.serviceImpl.ProductServiceImpl;

public class MainMenu {
	private Scanner sc = new Scanner(System.in);
	private ProductService ps = new ProductServiceImpl();
	private HistoryService hs = new HistoryServiceImpl();
	private ProductVO pvo = new ProductVO();
	private HistoryVO hvo = new HistoryVO();

	java.util.Date utilDate = new java.util.Date();
	java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
	DecimalFormat dFormatter = new DecimalFormat("###,###,###");

	private void mainTitle() { // 전체메뉴
		System.out.println("┌─ <창고 관리> ─┐");
		System.out.println("│  1.상품 관리  │");
		System.out.println("│  2.입출 관리  │");
		System.out.println("│    3.종료    │");
		System.out.println("└─────────────┘");
	}

	private void productTitle() { // 상품관리 메뉴
		System.out.println("┌─ <상품 관리> ─┐");
		System.out.println("│    1.등록    │");
		System.out.println("│    2.수정    │");
		System.out.println("│    3.삭제    │");
		System.out.println("│   4.전체조회  │");
		System.out.println("│   5.상세조회  │");
		System.out.println("│    6.뒤로    │");
		System.out.println("│    7.종료    │");
		System.out.println("└─────────────┘");
	}

	private void historyTitle() { // 입출관리 메뉴
		System.out.println("┌─ <입출 관리> ─┐");
		System.out.println("│    1.구매    │");
		System.out.println("│    2.판매    │");
		System.out.println("│    3.폐기    │");
		System.out.println("│   4.전체조회  │");
		System.out.println("│   5.상세조회  │");
		System.out.println("│   6.내역삭제  │");
		System.out.println("│    7.뒤로    │");
		System.out.println("│    8.종료    │");
		System.out.println("└─────────────┘");
	}

	public void run() throws Exception { // 전체
		boolean b = false;

		do {
			try {
				mainTitle();
				int key = Integer.parseInt(sc.nextLine());
				switch (key) {
				case 1:
					if (productManager() == 0) { // 상품관리
						System.out.println("종료합니다");
						b = true;
						break;
					} else {
						break;
					}
				case 2:
					if (historyManager() == 0) { // 거래내역 관리
						b = true;
					} else {
						break;
					}
				case 3:
					System.out.println("종료합니다.");
					b = true;
					break;
				default:
					System.out.println("잘못된 입력.");
				}
			} catch (NumberFormatException e) {
				System.out.println("잘못된 입력. 처음으로..");
			} catch (ArrayIndexOutOfBoundsException e) {
				System.out.println("값이 부족합니다. 처음으로..");
			}
		} while (!b);
		sc.close();
	}

	public int productManager() { // 상품관리
		boolean b = false;
		int key = 0;
		do {
			productTitle();
			key = Integer.parseInt(sc.nextLine());
			if (key == 1) {
				if (productInsert()) {
					System.out.println("등록성공!");
				} else {
					System.out.println("등록실패!");
				}
			} else if (key == 2) {
				if (productUpdate()) {
					System.out.println("수정성공!");
				} else {
					System.out.println("수정실패!");
				}
			} else if (key == 3) {
				if (productDelete()) {
					System.out.println("삭제성공!");
				} else {
					System.out.println("삭제실패!");
				}
			} else if (key == 4) {
				productSelectList();
			} else if (key == 5) {
				productSelect();
			} else if (key == 6) {
				b = true;
			} else if (key == 7) {
				b = true;
				return 0;
			} else {
				System.out.println("잘못된 입력.");
			}

		} while (!b);
		if (key != 6) {
			sc.close();
		}
		return 1;
	}

	private int getProductNo() { // 상품번호 지정하기
		int n = 0;
		for (int i = 0; i < ps.productSelectList().size(); i++) {
			if (ps.productSelectList() != null && ps.productSelectList().get(i).getProductNo() > n) {
				n = ps.productSelectList().get(i).getProductNo();
			} else {
				break;
			}
		}
		return n + 1;
	}

	private boolean productInsert() { // 상품관리-등록
		System.out.println("상품등록>> ");
		System.out.print("상품명, 위치>> ");
		String[] str = sc.nextLine().split(", ");
		int no = getProductNo();
		ProductVO vo = new ProductVO();
		vo.setProductNo(no);
		vo.setProductName(str[0]);
		vo.setProductLocation(str[1]);
		vo.setProductAmount(0);
		ps.productInsert(vo);
		return true;
	}

	private boolean productUpdate() { // 상품관리-수정
		for (int i = 0; i < ps.productSelectList().size(); i++) {
			System.out.println("상품수정>> ");
			System.out.print("변경할 상품번호, 상품명, 위치>> ");
			String[] str = sc.nextLine().split(", ");

			ProductVO vo = new ProductVO();
			ProductVO that = ps.productSelectList().get(i);

			if (Integer.parseInt(str[0]) == that.getProductNo()) {
				vo.setProductAmount(that.getProductAmount());
				vo.setProductNo(Integer.parseInt(str[0]));
				vo.setProductName(str[1]);
				vo.setProductLocation(str[2]);
				ps.productUpdate(vo);
				break;
			} else {
				System.out.println("없는 번호입니다.");
				return true;
			}
		}
		return true;
	}

	private boolean productDelete() { // 상품관리-삭제
		System.out.println("상품삭제>> ");
		System.out.println("삭제할 상품의 번호> ");
		int no = sc.nextInt();
		ps.productDelete(no);
		return true;
	}

	private void productSelectList() { // 상품관리-전체조회
		if (!ps.productSelectList().isEmpty()) {
			System.out.println("리스트를 불러옵니다..");
			System.out.printf("%-4s %-7s %4s %4s\n", "번호", "상품명", "위치", "재고");
			for (int i = 0; i < ps.productSelectList().size(); i++) {
				ps.productSelectList().get(i).string();
			}
			System.out.println("조회완료!");
		}
	}

	private void productSelect() { // 상품관리-상세조회
		System.out.println("조회할 키워드>> ");
		String str = sc.nextLine();
		if (!ps.productSelect(str).isEmpty()) {
			System.out.println("리스트를 불러옵니다..");
			System.out.printf("%-4s %-7s %4s %4s\n", "번호", "상품명", "위치", "재고");
			for (int i = 0; i < ps.productSelect(str).size(); i++) {
				ps.productSelect(str).get(i).string();
			}
			System.out.println("조회완료!");
		}
	}

	public int historyManager() throws ParseException { // 입출관리
		boolean b = false;
		int key = 0;
		do {
			historyTitle();
			key = Integer.parseInt(sc.nextLine());
			if (key == 1) {
				if (historyInsert("구매")) {
					System.out.println("구매완료!");
				} else {
					System.out.println("구매실패!");
				}
			} else if (key == 2) {
				if (historyInsert("판매")) {
					System.out.println("판매완료!");
				} else {
					System.out.println("판매실패!");
				}
			} else if (key == 3) {
				if (historyInsert("폐기")) {
					System.out.println("폐기완료!");
				} else {
					System.out.println("폐기실패!");
				}
			} else if (key == 4) {
				historySelectList();
			} else if (key == 5) {
				historySelect();
			} else if (key == 6) {
				if (historyDelete()) {
					System.out.println("삭제성공!");
				} else {
					System.out.println("삭제실패!");
				}
			} else if (key == 7) {
				b = true;
			} else if (key == 8) {
				b = true;
				return 0;
			} else {
				System.out.println("잘못된 입력.");
			}

		} while (!b);
		if (key != 7) {
			sc.close();
		}
		return 1;
	}

	private int gethistoryNo() { // 입출번호 지정하기
		int n = 0;
		for (int i = 0; i < hs.historySelectList().size(); i++) {
			if (hs.historySelectList() != null && hs.historySelectList().get(i).getHistoryNo() > n) {
				n = hs.historySelectList().get(i).getHistoryNo();
			} else {
				break;
			}
		}
		return n + 1;
	}

	private boolean historyInsert(String type) throws ParseException { // 입출관리-구매,판매,폐기
		// 구매와 판매 메소드
		if (type.equals("구매") || type.equals("판매")) {
			if (type.equals("구매")) {
				System.out.println("상품구매>> ");
			} else if (type.equals("판매")) {
				System.out.println("상품판매>> ");
			}
			System.out.println("상품번호, 거래가격, 거래량, 날짜(yyyy-mm-dd)>> ");
			String[] str = sc.nextLine().split(", ");
			
			// 판매량이 재고보다 많으면.
			for (int j = 0; j < ps.productSelectList().size(); j++) {
				ProductVO thatJ = ps.productSelectList().get(j);
				if (type.equals("판매") && thatJ.getProductNo() == Integer.parseInt(str[0])
						&& Integer.parseInt(str[2]) > thatJ.getProductAmount()) {
					System.out.println("재고가 부족합니다.");
					return false;
				}
			}

			int no = gethistoryNo();
			String name = "";
			String location = "";
			int amount = 0;
			int pno = 0;
			int cost = Integer.parseInt(str[1]) * Integer.parseInt(str[2]);
			try {
			Date date = sqlDate.valueOf(str[3]);
			} catch(IllegalArgumentException e) {
				System.out.println("날짜형식 오류.");
				return false;
			}

			for (int i = 0; i < ps.productSelectList().size(); i++) {
				ProductVO that = ps.productSelectList().get(i);
				if (ps.productSelectList().get(i).getProductNo() == Integer.parseInt(str[0])) {
					name = that.getProductName();
					location = that.getProductLocation();
					pno = that.getProductNo();
					amount = that.getProductAmount();
					if (type.equals("구매")) {
						amount += Integer.parseInt(str[2]);
					} else if (type.equals("판매")) {
						amount -= Integer.parseInt(str[2]);
					}
					break;
				}
			}

			HistoryVO vo = new HistoryVO();
			vo.setHistoryNo(no);
			vo.setHistoryType(type);
			vo.setProductNo(Integer.parseInt(str[0]));
			vo.setProductName(name);
			vo.setHistoryPrice(Integer.parseInt(str[1]));
			vo.setHistoryAmount(Integer.parseInt(str[2]));
			vo.setHistoryCost(cost);
			vo.setHistoryDate(sqlDate.valueOf(str[3]));
			hs.historyInsert(vo);

			ProductVO pvo = new ProductVO(); // 재고량 적용.
			pvo.setProductName(name);
			pvo.setProductLocation(location);
			pvo.setProductAmount(amount);
			pvo.setProductNo(pno);
			ps.productUpdate(pvo);
			return true;

			// 폐기 메소드.
		} else if (type.equals("폐기")) {
			System.out.println("상품폐기>> ");
			System.out.println("상품번호, 폐기량, 날짜(yyyy-mm-dd)>> ");
			String[] str = sc.nextLine().split(", ");

			// 폐기량이 재고보다 많으면
			for (int j = 0; j < ps.productSelectList().size(); j++) {
				ProductVO thatJ = ps.productSelectList().get(j);
				if (thatJ.getProductNo() == Integer.parseInt(str[0])
						&& Integer.parseInt(str[1]) > thatJ.getProductAmount()) {
					System.out.println("재고가 부족합니다.");
					return false;
				}
			}

			int no = gethistoryNo();
			String name = "";
			String location = "";
			int price = 0;
			int amount = 0;
			int pno = 0;
			int cost = 0;
			try {
			Date date = sqlDate.valueOf(str[2]);
			} catch(IllegalArgumentException e) {
				System.out.println("날짜형식 오류");
				return false;
			}

			for (int i = 0; i < ps.productSelectList().size(); i++) {
				ProductVO thatI = ps.productSelectList().get(i);
				if (ps.productSelectList().get(i).getProductNo() == Integer.parseInt(str[0])) {
					name = thatI.getProductName();
					location = thatI.getProductLocation();
					pno = thatI.getProductNo();
					amount = thatI.getProductAmount();
					amount -= Integer.parseInt(str[1]);
					break;
				}
			}
			// 폐기할 재고의 손실액은 마지막으로 구매한 물품의 가격으로 산정.
			for (int i = 0; i < hs.historySelectList().size(); i++) {
				HistoryVO that = hs.historySelectList().get(i);
				if (that.getHistoryType().equals("구매")) {
					price = that.getHistoryPrice();
				}
			}

			HistoryVO vo = new HistoryVO();
			vo.setHistoryNo(no);
			vo.setHistoryType(type);
			vo.setProductNo(Integer.parseInt(str[0]));
			vo.setProductName(name);
			vo.setHistoryPrice(price);
			vo.setHistoryAmount(Integer.parseInt(str[1]));
			vo.setHistoryCost(price * Integer.parseInt(str[1]));
			vo.setHistoryDate(sqlDate.valueOf(str[2]));
			hs.historyInsert(vo);

			ProductVO pvo = new ProductVO();
			pvo.setProductName(name);
			pvo.setProductLocation(location);
			pvo.setProductAmount(amount);
			pvo.setProductNo(pno);
			ps.productUpdate(pvo);

			return true;

		} else {
			return false;
		}
	}

	private void historySelectList() { // 입출관리-전체조회
		if (!hs.historySelectList().isEmpty()) {
			System.out.println("리스트를 불러옵니다..");
			System.out.printf("%-3s %2s %-4s %-8s %4s %3s %6s %6s\n", "번호", "타입", "상품번호", "상품명", "거래가격", "거래량", "거래비용",
					"날짜");

			int sum = 0;
			int cost = 0;
			for (int i = 0; i < hs.historySelectList().size(); i++) {
				String type = hs.historySelectList().get(i).getHistoryType();
				cost = hs.historySelectList().get(i).getHistoryCost();
				hs.historySelectList().get(i).string();
				if (type.equals("구매")) {
					sum -= cost;
				} else if (type.equals("판매")) {
					sum += cost;
				} else if (type.equals("폐기")) {
					sum -= cost;
				}
			}
			System.out.println("정산비용: " + dFormatter.format(sum));
			System.out.println("조회완료!");
		} else {
			System.out.println("빈 목록.");
		}
	}

	private void historySelect() { // 입출관리-상세조회
		System.out.println("조회할 키워드>> ");
		String str = sc.nextLine();
		if (!hs.historySelect(str).isEmpty()) {
			System.out.println("리스트를 불러옵니다..");
			System.out.printf("%-3s %2s %-4s %-8s %4s %3s %6s %6s\n", "번호", "타입", "상품번호", "상품명", "거래가격", "거래량", "거래비용",
					"날짜");

			int sum = 0;
			int cost = 0;
			for (int i = 0; i < hs.historySelect(str).size(); i++) {
				String type = hs.historySelectList().get(i).getHistoryType();
				cost = hs.historySelectList().get(i).getHistoryCost();
				hs.historySelect(str).get(i).string();
				if (type.equals("구매")) {
					sum -= cost;
				} else if (type.equals("판매")) {
					sum += cost;
				} else if (type.equals("폐기")) {
					sum -= cost;
				}
			}
			System.out.println("정산비용: " + dFormatter.format(sum));
			System.out.println("조회완료!");
		} else {
			System.out.println("빈 목록.");
		}
	}

	private boolean historyDelete() { // 입출관리-삭제
		if (hs.historySelectList() != null) {
			System.out.println("내역삭제>> ");
			System.out.println("삭제할 내역의 번호> ");
			int no = sc.nextInt();
			for (int i = 0; i < hs.historySelectList().size(); i++) {
				if (no == hs.historySelectList().get(i).getHistoryNo()) {
					hs.historyDelete(no);
					break;
				} else {
					System.out.println("없는 번호.");
					return false;
				}
			}

		} else {
			System.out.println("빈 목록입니다.");
			return false;
		}
		return true;
	}
} // end of main.
